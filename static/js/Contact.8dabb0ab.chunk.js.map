{"version":3,"file":"static/js/Contact.8dabb0ab.chunk.js","mappings":"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","sources":["../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/validateParams.js","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","components/contact/contactValidation.ts","features/contacts/selectors.ts","webpack://project/./src/components/contact/Contact.module.scss?ad73","components/contact/Contact.tsx"],"sourcesContent":["export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse ? httpResponse.status : 0;\n        this.text = httpResponse ? httpResponse.responseText : 'Network Error';\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, publicKey) => {\n    const uID = publicKey || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.12.1');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","//slice\r\nimport { setCheckValidEmail, setCheckValidName } from '../../features/contacts/slice';\r\n\r\nconst formValidation = (inputName: string, inputEmail: string, dispatch: any): boolean => {\r\n\r\n  //name validation\r\n  if (!inputName) {\r\n    dispatch(setCheckValidName(false))\r\n\r\n    return false\r\n  }\r\n\r\n  for (let i = 0; i < inputName.length; i++) {\r\n    const inputNameLetter = inputName[i]\r\n\r\n    if (inputNameLetter.toLowerCase() === inputNameLetter.toUpperCase()) {\r\n      dispatch(setCheckValidName(false))\r\n\r\n      return false\r\n    } else {\r\n      dispatch(setCheckValidName(true))\r\n    }\r\n  }\r\n\r\n  //email validation\r\n  const checkValidEmail: RegExpMatchArray | null = String(inputEmail)\r\n    .toLowerCase()\r\n    .match(\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n\r\n  if (!checkValidEmail) {\r\n    dispatch(setCheckValidEmail(false))\r\n\r\n    return false\r\n  } else {\r\n    dispatch(setCheckValidEmail(true))\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nexport default formValidation","import { RootState } from \"../../store/store\";\r\n\r\n\r\nexport const validation = (state: RootState) => state.contactValidation\r\n","// extracted by mini-css-extract-plugin\nexport default {\"contactContainer\":\"Contact_contactContainer__tAC-4\",\"contactTitle\":\"Contact_contactTitle__REfyc\",\"contactInfo\":\"Contact_contactInfo__Xr-tM\",\"contactCard\":\"Contact_contactCard__rfhTZ\",\"contactCardIcon\":\"Contact_contactCardIcon__ZlCwI\",\"contactCardTitle\":\"Contact_contactCardTitle__8xGHl\",\"contactCardData\":\"Contact_contactCardData__FF3hn\",\"contactButton\":\"Contact_contactButton__-S+6-\",\"contactButtonIcon\":\"Contact_contactButtonIcon__LFdJQ\",\"contactForm\":\"Contact_contactForm__8HtBD\",\"contactFormDiv\":\"Contact_contactFormDiv__OEyK9\",\"contactFormInput\":\"Contact_contactFormInput__Cj5nb\",\"contactFormTag\":\"Contact_contactFormTag__A3e2E\",\"contactFormArea\":\"Contact_contactFormArea__coccw\",\"contactRequired\":\"Contact_contactRequired__6n1aO\",\"incorrectNameValue\":\"Contact_incorrectNameValue__J51Es\"};","import React, { useRef } from 'react';\r\nimport emailjs from '@emailjs/browser'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport formValidation from './contactValidation';\r\nimport { validation } from '../../features/contacts/selectors';\r\nimport { setInputName, setInputEmail } from '../../features/contacts/slice';\r\nimport styles from './Contact.module.scss'\r\n\r\nconst Contact: React.FC = () => {\r\n\r\n  const form = useRef<HTMLFormElement | null>(null);\r\n\r\n  const dispatch = useDispatch()\r\n  const { inputName, inputEmail, checkValidName, checkValidEmail } = useSelector(validation)\r\n\r\n  const sendEmail = (e: React.FormEvent<HTMLFormElement>): void => {\r\n    e.preventDefault()\r\n\r\n    if (formValidation(inputName, inputEmail, dispatch)) {\r\n\r\n      form.current && emailjs.sendForm('service_alslkgq', 'template_q034o4l', form.current, 'voronin.yevhenii@gmail.com')\r\n\r\n      dispatch(setInputEmail(''))\r\n      dispatch(setInputName(''))\r\n\r\n      e.currentTarget.reset()\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className={`${styles.contact} section`} id=\"contact\">\r\n      <h2 className={`${styles.contactTitle} section__title`}>Get in Touch</h2>\r\n      <span className={`${styles.contactSubTitle} section__subTitle`}>Contact Me</span>\r\n      <div className={`${styles.contactContainer} container grid`}>\r\n        <div className={styles.contactContent}>\r\n          <h3 className={styles.contactTitle}>Talk to me</h3>\r\n          <div className={styles.contactInfo}>\r\n            <div className={styles.contactCard}>\r\n              <i className={`bx bx-mail-send ${styles.contactCardIcon}`} />\r\n              <h3 className={styles.contactCardTitle}>Email:</h3>\r\n              <span className={styles.contactCardData}>voronin.yevhenii@gmail.com</span>\r\n              <a className={styles.contactButton} href=\"mailto:voronin.yevhenii@gmail.com\">Write me <i className={`${styles.contactButtonIcon} bx bx-rigth-arrow-alt`} /></a>\r\n            </div>\r\n            <div className={styles.contactCard}>\r\n              <i className={`bx bxl-telegram ${styles.contactCardIcon}`} />\r\n              <h3 className={styles.contactCardTitle}>Telegram</h3>\r\n              <span className={styles.contactCardData}>+380 99 004 89 47</span>\r\n              <a className={styles.contactButton} rel=\"noreferrer\" target=\"_blank\" href=\"https://t.me/voroninee\">Write me <i className={`${styles.contactButtonIcon} bx bx-rigth-arrow-alt`} /></a>\r\n            </div>\r\n            <div className={styles.contactCard}>\r\n              <i className={`bx bxl-linkedin-square ${styles.contactCardIcon}`} />\r\n              <h3 className={styles.contactCardTitle}>LinkedIn</h3>\r\n              <span className={styles.contactCardData}>Check out my linkedin</span>\r\n              <a className={styles.contactButton} rel=\"noreferrer\" target=\"_blank\" href=\"https://www.linkedin.com/in/yevhenii-voronin-kyiv/\">Follow me <i className={`${styles.contactButtonIcon} bx bx-rigth-arrow-alt`} /></a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className={styles.contactContent}>\r\n          <h3 className={styles.contactTitle}>Send me your offer</h3>\r\n          <form\r\n            className={styles.contactForm}\r\n            ref={form}\r\n            onSubmit={sendEmail}>\r\n            <div className={styles.contactFormDiv}>\r\n              <label className={styles.contactFormTag}>Name*</label>\r\n              <input\r\n                onChange={(e) => dispatch(setInputName(e.target.value))\r\n                }\r\n                value={inputName}\r\n                className={styles.contactFormInput}\r\n                type=\"text\"\r\n                name='name'\r\n                placeholder='Insert your name' />\r\n              {!checkValidName && <span className={styles.incorrectNameValue}>Only letters available</span>}\r\n            </div>\r\n            <div className={styles.contactFormDiv}>\r\n              <label htmlFor='mail' className={styles.contactFormTag}>Mail*</label>\r\n              <input\r\n                id='mail'\r\n                onChange={(e) => dispatch(setInputEmail(e.target.value))}\r\n                value={inputEmail}\r\n                className={styles.contactFormInput}\r\n                type=\"text\"\r\n                name='name'\r\n                placeholder='Insert your email' />\r\n              {!checkValidEmail && <span className={styles.incorrectNameValue}>\r\n                Invalid email address entered\r\n              </span>}\r\n            </div>\r\n            <div className={`${styles.contactFormDiv} ${styles.contactFormArea}`}>\r\n              <label className={styles.contactFormTag}>Company</label>\r\n              <textarea\r\n                className={styles.contactFormInput}\r\n                name=\"project\"\r\n                placeholder='Describe your offer and company' />\r\n            </div>\r\n            <span className={styles.contactRequired}>* - Required fields</span>\r\n            <button\r\n              type='submit'\r\n              className='button button--flex'  >\r\n              Send Message\r\n              <svg\r\n                className=\"button__icon\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"24\"\r\n                height=\"24\"\r\n                viewBox=\"0 0 24 24\"\r\n                fill=\"none\">\r\n                <path\r\n                  d=\"M14.2199 21.9352C13.0399 21.9352 11.3699 21.1052 10.0499 17.1352L9.32988 14.9752L7.16988 14.2552C3.20988 12.9352 2.37988 11.2652 2.37988 10.0852C2.37988 8.91525 3.20988 7.23525 7.16988 5.90525L15.6599 3.07525C17.7799 2.36525 19.5499 2.57525 20.6399 3.65525C21.7299 4.73525 21.9399 6.51525 21.2299 8.63525L18.3999 17.1252C17.0699 21.1052 15.3999 21.9352 14.2199 21.9352ZM7.63988 7.33525C4.85988 8.26525 3.86988 9.36525 3.86988 10.0852C3.86988 10.8052 4.85988 11.9052 7.63988 12.8252L10.1599 13.6652C10.3799 13.7352 10.5599 13.9152 10.6299 14.1352L11.4699 16.6552C12.3899 19.4352 13.4999 20.4252 14.2199 20.4252C14.9399 20.4252 16.0399 19.4352 16.9699 16.6552L19.7999 8.16525C20.3099 6.62525 20.2199 5.36525 19.5699 4.71525C18.9199 4.06525 17.6599 3.98525 16.1299 4.49525L7.63988 7.33525Z\"\r\n                  fill='#fff'\r\n                ></path>\r\n                <path\r\n                  d=\"M10.11 14.7052C9.92005 14.7052 9.73005 14.6352 9.58005 14.4852C9.29005 14.1952 9.29005 13.7152 9.58005 13.4252L13.16 9.83518C13.45 9.54518 13.93 9.54518 14.22 9.83518C14.51 10.1252 14.51 10.6052 14.22 10.8952L10.64 14.4852C10.5 14.6352 10.3 14.7052 10.11 14.7052Z\"\r\n                  fill='#fff'\r\n                ></path>\r\n              </svg>\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Contact\r\n\r\n\r\n\r\n"],"names":["store","_origin","validateParams","publicKey","serviceID","templateID","EmailJSResponseStatus","constructor","httpResponse","this","status","text","responseText","sendPost","url","data","headers","arguments","length","undefined","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","_ref","target","responseStatus","_ref2","open","Object","keys","forEach","key","setRequestHeader","send","sendForm","form","uID","_userID","currentForm","document","querySelector","nodeName","findHTMLForm","formData","FormData","append","formValidation","inputName","inputEmail","dispatch","setCheckValidName","i","inputNameLetter","toLowerCase","toUpperCase","String","match","setCheckValidEmail","validation","state","contactValidation","Contact","useRef","useDispatch","checkValidName","checkValidEmail","useSelector","_jsxs","className","concat","styles","contact","id","children","_jsx","contactTitle","contactSubTitle","contactContainer","contactContent","contactInfo","contactCard","contactCardIcon","contactCardTitle","contactCardData","contactButton","href","contactButtonIcon","rel","contactForm","ref","onSubmit","e","preventDefault","current","emailjs","setInputEmail","setInputName","currentTarget","reset","contactFormDiv","contactFormTag","onChange","value","contactFormInput","type","name","placeholder","incorrectNameValue","htmlFor","contactFormArea","contactRequired","xmlns","width","height","viewBox","fill","d"],"sourceRoot":""}